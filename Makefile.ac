SWIFT_FLAGS = $(foreach flag, $(subst ,, $(UMLSCLIENT_UPCOMING_FEATURES)), -Xswiftc -D$(flag))
LLDB_DEBUG_TEST_FLAGS := $(if $(XCTEST_FILTER),-XCTest $(XCTEST_FILTER),)
TEST_BUNDLE := $(shell swift build --show-bin-path)/UMLSClientModelPackageTests.xctest
XCTEST_EXEC := $(shell xcrun --find xctest)
TEST_FILTER_FLAG := $(foreach test,$(subst :, ,$(XCTEST_FILTER)),--filter $(test))
# Use UMLSCLIENT_UPCOMING_FEATURES environment variable to specify comma
# separated swift compiler flags. The enviroment variable is supported by build
# and test target.
#
# Use XCTEST_FILTER environment variable to specify comma separated tests. The
# tests should satisfiles following Format: <test-target>.<test-case> or
# <test-target>.<test-case>/<test>. If not specified the target will create lldb
# session for all the tests. The environment variable is supported by lldb
# target. NOTE: lldb target does not build the project or tests. For the use build target

.PHONY: tests

build:
	@echo "=> Building..."
	@swift build --quiet --enable-experimental-prebuilts $(SWIFT_FLAGS)

test-build:
	@echo "=> Building with tests...."
	@swift build --quiet --enable-experimental-prebuilts --build-tests $(SWIFT_FLAGS)

test:
	@echo "=> Testing..."
	@swift test --quiet --enable-experimental-prebuilts $(SWIFT_FLAGS) $(TEST_FILTER_FLAG)

tests:
	@echo "=> Listing test methods."
	@swift test --quiet --enable-experimental-prebuilts list $(SWIFT_FLAGS)

format:
	@echo "=> Formatting..."
	@swift format -i -p -r --color-diagnostics --follow-symlinks .

lint:
	@echo "=> Find linting issues..."
	@swift format lint -r -p -s --color-diagnostics --follow-symlinks .

lldb: test-build
	@echo "=> Starting LLDB."
	@lldb -s commands.lldb -Q -- $(XCTEST_EXEC) $(LLDB_DEBUG_TEST_FLAGS) $(TEST_BUNDLE)

repl: build
	@echo "=> Starting swift project REPL"
	@swift run --repl $(SWIFT_FLAGS)
